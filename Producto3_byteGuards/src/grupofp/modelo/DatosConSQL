package grupofp.modelo;

import java.sql.*;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;

/**
 * La clase Datos es el núcleo central del modelo de la aplicación, encargada de gestionar
 * y almacenar las colecciones dinámicas de datos, incluyendo artículos, clientes y pedidos.
 * Actúa como el intermediario entre el controlador y el resto del modelo, proporcionando
 * métodos para añadir, modificar, eliminar y consultar los datos a través de sus listas:
 * - ListaArticulos para gestionar los artículos.
 * - ListaClientes para gestionar los clientes.
 * - ListaPedidos para gestionar los pedidos.
 * Cada una de estas listas se implementa utilizando una estructura dinámica basada en ArrayList,
 * lo que permite un manejo flexible y eficiente del almacenamiento de datos, redimensionándose
 * automáticamente según la necesidad. Esta abstracción facilita la reutilización y el mantenimiento
 * del código, al centralizar la gestión de la información en una única clase.
 */
public class Datos {
    private ListaArticulos listaArticulos;
    private ListaClientes listaClientes;
    private ListaPedidos listaPedidos;

    private Connection dbConnection; // para conectar la BBDD



    public Datos() {
        listaArticulos = new ListaArticulos();
        listaClientes = new ListaClientes();
        listaPedidos = new ListaPedidos();


        // Conexión a la BBDD
        MySQLConnector connector = new MySQLConnector();
        dbConnection =connector.getConnection();

    }

    public ListaArticulos getListaArticulos() {
        return listaArticulos;
    }

    public void setListaArticulos(ListaArticulos listaArticulos) {
        this.listaArticulos = listaArticulos;
    }

    public ListaClientes getListaClientes() {
        return listaClientes;
    }

    public void setListaClientes(ListaClientes listaClientes) {
        this.listaClientes = listaClientes;
    }

    public ListaPedidos getListaPedidos() {
        return listaPedidos;
    }

    public void setListaPedidos(ListaPedidos listaPedidos) {
        this.listaPedidos = listaPedidos;
    }


    /*
    public void addArticulo(String id, String descripcion, float precio, float gastosEnvio, int tiempoPreparacion) {

        listaArticulos.add(new Articulo(id, descripcion, precio, gastosEnvio, tiempoPreparacion));
    }
    public ArrayList recorrerTodosArticulos(){
        ArrayList<String> arrArticulos = new ArrayList<>();
        for(Articulo a : listaArticulos.lista){
            arrArticulos.add(a.toString());
        }
        return arrArticulos;
    }
*/
    public void addArticulo(String id, String descripcion, float precio, float gastosEnvio, int tiempoPreparacion) {
        String insertQuery = "INSERT INTO articulo (idArticulo, descripcion, precio, gastosEnvio, tiempoPreparacion) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(insertQuery)) {
            preparedStatement.setString(1, id);
            preparedStatement.setString(2, descripcion);
            preparedStatement.setFloat(3, precio);
            preparedStatement.setFloat(4, gastosEnvio);
            preparedStatement.setInt(5, tiempoPreparacion);

            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Artículo agregado con éxito a la base de datos.");
            }
        } catch (SQLException e) {
            System.err.println("Error al agregar artículo a la base de datos: " + e.getMessage());
        }
    }

    public ArrayList<String> recorrerTodosArticulos() {
        ArrayList<String> arrArticulos = new ArrayList<>();
        String selectQuery = "SELECT * FROM articulo";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectQuery)) {
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String idArticulo = resultSet.getString("idArticulo");
                String descripcion = resultSet.getString("descripcion");
                float precio = resultSet.getFloat("precio");
                float gastosEnvio = resultSet.getFloat("gastosEnvio");
                int tiempoPreparacion = resultSet.getInt("tiempoPreparacion");

                String articuloInfo = "Articulo{" +
                        "idArticulo='" + idArticulo + '\'' +
                        ", descripcion='" + descripcion + '\'' +
                        ", precio=" + precio +
                        ", gastosEnvio=" + gastosEnvio +
                        ", tiempoPreparacion=" + tiempoPreparacion +
                        '}';
                arrArticulos.add(articuloInfo);
            }
        } catch (SQLException e) {
            System.err.println("Error al recuperar los artículos de la base de datos: " + e.getMessage());
        }

        return arrArticulos;
    }

    // CAMBIOS APLICADOS PARA AÑADIR CLIENTE
//    public void aniadirCliente(String nombre, String domicilio, String nif, String email, Float descuento) {
//        if (descuento != null) {
//            listaClientes.add(new ClientePremium(nombre, domicilio, nif, email, descuento));
//        } else {
//            listaClientes.add(new ClienteEstandar(nombre, domicilio, nif, email));
//        }
//
//    }

    //    public ArrayList recorrerTodosClientes(){
//        ArrayList<String> arrClientes = new ArrayList<>();
//        for(Cliente listaClientes1 : listaClientes.lista){
//            arrClientes.add(listaClientes1.toString());
//        }
//        return arrClientes;
//    }
    public void addCliente(String nombre, String domicilio, String nif, String email, Float descuento) {
        try {
            // validarNIF(nif);

            String insertQuery = "INSERT INTO cliente (nombre, domicilio, nif, email) VALUES (?, ?, ?, ?)";

            try (PreparedStatement preparedStatement = dbConnection.prepareStatement(insertQuery, PreparedStatement.RETURN_GENERATED_KEYS)) {
                preparedStatement.setString(1, nombre);
                preparedStatement.setString(2, domicilio);
                preparedStatement.setString(3, nif);
                preparedStatement.setString(4, email);

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        int idCliente = generatedKeys.getInt(1);

                        if (descuento != null) {
                            // Cliente Premium
                            String insertPremiumQuery = "INSERT INTO clientePremium (descuento, idcliente) VALUES (?, ?)";
                            try (PreparedStatement premiumPreparedStatement = dbConnection.prepareStatement(insertPremiumQuery)) {
                                premiumPreparedStatement.setFloat(1, descuento);
                                premiumPreparedStatement.setInt(2, idCliente);
                                premiumPreparedStatement.executeUpdate();
                            } catch (SQLException premiumException) {
                                System.err.println("Error al agregar cliente premium a la base de datos: " + premiumException.getMessage());
                            }
                        } else {
                            // Cliente Estándar
                            String insertEstandarQuery = "INSERT INTO clienteEstandar (idcliente) VALUES (?)";
                            try (PreparedStatement estandarPreparedStatement = dbConnection.prepareStatement(insertEstandarQuery)) {
                                estandarPreparedStatement.setInt(1, idCliente);
                                estandarPreparedStatement.executeUpdate();
                            } catch (SQLException estandarException) {
                                System.err.println("Error al agregar cliente estándar a la base de datos: " + estandarException.getMessage());
                            }
                        }

                        System.out.println("Cliente agregado con éxito a la base de datos.");
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error al agregar cliente a la base de datos: " + e.getMessage());
        }
        // catch (Controlador.NIFValidationException e) {
        //    throw new RuntimeException(e);
        // }
    }


    public ArrayList<String> recorrerTodosClientes() {
        ArrayList<String> arrClientes = new ArrayList<>();
        String selectQuery = "SELECT cliente.*, clientePremium.descuento FROM cliente LEFT JOIN clientePremium ON cliente.idcliente = clientePremium.idcliente";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectQuery)) {
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                System.out.println("Procesando un cliente...");
                String nombre = resultSet.getString("nombre");
                String domicilio = resultSet.getString("domicilio");
                String nif = resultSet.getString("nif");
                String email = resultSet.getString("email");
                float descuento = resultSet.getFloat("descuento");

                if (descuento > 0) {
                    arrClientes.add("Cliente Premium{" +
                            "Nombre: " + nombre +
                            " Domicilio: " + domicilio +
                            " Nif: " + nif +
                            " Email: " + email +
                            " Descuento: " + descuento +
                            '}');
                } else {
                    arrClientes.add("Cliente Estándar{" +
                            "Nombre: " + nombre +
                            " Domicilio: " + domicilio +
                            " Nif: " + nif +
                            " Email: " + email +
                            '}');
                }
            }
        } catch (SQLException e) {
            System.err.println("Error al recuperar los clientes de la base de datos: " + e.getMessage());
        }

        return arrClientes;
    }

    public ArrayList<String> recorrerClienteE() {
        ArrayList<String> arrClienteEstandar = new ArrayList<>();
        String selectQuery = "SELECT cliente.*, clientePremium.descuento FROM cliente LEFT JOIN clientePremium ON cliente.idcliente = clientePremium.idcliente WHERE clientePremium.descuento IS NULL";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectQuery)) {
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String nombre = resultSet.getString("nombre");
                String domicilio = resultSet.getString("domicilio");
                String nif = resultSet.getString("nif");
                String email = resultSet.getString("email");

                arrClienteEstandar.add("Cliente Estándar{" +
                        "Nombre: " + nombre +
                        " Domicilio: " + domicilio +
                        " Nif: " + nif +
                        " Email: " + email +
                        '}');
            }
        } catch (SQLException e) {
            System.err.println("Error al recuperar los clientes estándar de la base de datos: " + e.getMessage());
        }

        return arrClienteEstandar;
    }


    public ArrayList<String> recorrerClienteP() {
        ArrayList<String> arrClientePremium = new ArrayList<>();
        String selectQuery = "SELECT cliente.*, clientePremium.descuento FROM cliente LEFT JOIN clientePremium ON cliente.idcliente = clientePremium.idcliente WHERE clientePremium.descuento > 0";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectQuery)) {
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String nombre = resultSet.getString("nombre");
                String domicilio = resultSet.getString("domicilio");
                String nif = resultSet.getString("nif");
                String email = resultSet.getString("email");
                float descuento = resultSet.getFloat("descuento");

                arrClientePremium.add("Cliente Premium{" +
                        "Nombre: " + nombre +
                        " Domicilio: " + domicilio +
                        " Nif: " + nif +
                        " Email: " + email +
                        " Descuento: " + descuento +
                        '}');
            }
        } catch (SQLException e) {
            System.err.println("Error al recuperar los clientes premium de la base de datos: " + e.getMessage());
        }

        return arrClientePremium;
    }



    public boolean addPedido(int numPedido, int cantidad, LocalDateTime fecha, String email, String id) {
        String selectClienteQuery = "SELECT idcliente FROM cliente WHERE email = ?";
        String selectArticuloQuery = "SELECT idArticulo FROM articulo WHERE idArticulo = ?";
        String insertPedidoQuery = "INSERT INTO pedido (numPedido, cantidad, fecha, idCliente, idArticulo) VALUES (?, ?, ?, ?, ?)";

        try {
            int idCliente = -1;
            int idArticulo = -1;

            try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectClienteQuery)) {
                preparedStatement.setString(1, email);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (resultSet.next()) {
                    idCliente = resultSet.getInt("idCliente");
                }
            } catch (SQLException e) {
                System.err.println("Error al obtener el ID del cliente desde la base de datos: " + e.getMessage());
            }

            try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectArticuloQuery)) {
                preparedStatement.setString(1, id);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (resultSet.next()) {
                    idArticulo = resultSet.getInt("idArticulo");
                }
            } catch (SQLException e) {
                System.err.println("Error al obtener el ID del artículo desde la base de datos: " + e.getMessage());
            }

            if (idCliente != -1 && idArticulo != -1) {
                try (PreparedStatement preparedStatement = dbConnection.prepareStatement(insertPedidoQuery)) {
                    preparedStatement.setInt(1, numPedido);
                    preparedStatement.setInt(2, cantidad);
                    preparedStatement.setObject(3, fecha);
                    preparedStatement.setInt(4, idCliente);
                    preparedStatement.setInt(5, idArticulo);

                    int rowsAffected = preparedStatement.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Pedido agregado con éxito.");
                        return true;
                    }
                } catch (SQLException e) {
                    System.err.println("Error al agregar pedido a la base de datos: " + e.getMessage());
                }
            }
        } catch (Exception e) {
            System.err.println("Error al agregar pedido: " + e.getMessage());
        }

        return false;
    }


    public Articulo dameArticulo(String id) {
//        Articulo articulo = new Articulo();
//        for(Articulo art : listaArticulos.lista){
//            if(id.equals(art.getIdArticulo())){
//                articulo = art;
//            }
//        }
//        return articulo;
        String selectQuery = "SELECT * FROM articulo WHERE idArticulo = ?";
        Articulo articulo = new Articulo();

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectQuery)) {
            preparedStatement.setString(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                articulo.setcodigoArticulo(resultSet.getString("idArticulo"));
                articulo.setDescripcion(resultSet.getString("descripcion"));
                articulo.setPrecio(resultSet.getFloat("precio"));
                articulo.setGastosEnvio(resultSet.getFloat("gastosEnvio"));
                articulo.setTiempoPreparacion(resultSet.getInt("tiempoPreparacion"));
            }
        } catch (SQLException e) {
            System.err.println("Error al obtener el artículo desde la base de datos: " + e.getMessage());
        }

        return articulo;
    }


    public boolean existeCliente(String email) {
//        for (Cliente cli : listaClientes.lista) {
//            if (cli.getEmail().equals(email)) {
//                return true;
//            }
//        }
//        return false;
        String selectQuery = "SELECT COUNT(*) FROM cliente WHERE email = ?";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectQuery)) {
            preparedStatement.setString(1, email);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                int count = resultSet.getInt(1);
                return count > 0;
            }
        } catch (SQLException e) {
            System.err.println("Error al verificar la existencia del cliente en la base de datos: " + e.getMessage());
        }

        return false;
    }

    public int dameCliente(String email) {
//        int contenido = 0;
//        for(Cliente cli : listaClientes.lista){
//            if(email.equals(cli.getEmail())){
//                return contenido;
//            }
//            contenido++;
//        }
//        return contenido;
        String selectQuery = "SELECT idcliente FROM cliente WHERE email = ?";
        int clienteId = -1;

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(selectQuery)) {
            preparedStatement.setString(1, email);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                clienteId = resultSet.getInt("idCliente");
            }
        } catch (SQLException e) {
            System.err.println("Error al obtener el ID del cliente desde la base de datos: " + e.getMessage());
        }

        return clienteId;
    }


    public void addClientePedido(int numPedido, int cantidad, LocalDateTime fecha, String email, String idArticulo) {
        int clienteId = dameCliente(email);
        Articulo articulo = dameArticulo(idArticulo);

        if (clienteId != -1 && articulo.getcodigoArticulo() != null) {
            String insertPedidoQuery = "INSERT INTO pedido (numPedido, cantidad, fecha, idcliente, idArticulo) VALUES (?, ?, ?, ?, ?)";

            try (PreparedStatement preparedStatement = dbConnection.prepareStatement(insertPedidoQuery)) {
                preparedStatement.setInt(1, numPedido);
                preparedStatement.setInt(2, cantidad);
                preparedStatement.setObject(3, fecha);
                preparedStatement.setInt(4, clienteId);
                preparedStatement.setString(5, articulo.getcodigoArticulo());

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("Pedido agregado con éxito.");
                }
            } catch (SQLException e) {
                System.err.println("Error al agregar pedido a la base de datos: " + e.getMessage());
            }
        } else {
            System.err.println("No se pudo agregar el pedido porque el cliente o el artículo no fueron encontrados.");
        }
    }

    public void borrarPedido(int numPedido) {
        String selectFechaQuery = "SELECT fecha FROM pedido WHERE numPedido = ?";
        String deletePedidoQuery = "DELETE FROM pedido WHERE numPedido = ?";

        try (PreparedStatement selectStatement = dbConnection.prepareStatement(selectFechaQuery)) {
            selectStatement.setInt(1, numPedido);
            ResultSet resultSet = selectStatement.executeQuery();

            if (resultSet.next()) {
                Timestamp fechaPedido = resultSet.getTimestamp("fecha");
                LocalDateTime fechaCreacion = fechaPedido.toLocalDateTime();
                LocalDateTime ahora = LocalDateTime.now();

                Duration duracion = Duration.between(fechaCreacion, ahora);

                if (duracion.toHours() <= 24) {
                    // Si no han pasado más de 24h, se puede borrar
                    try (PreparedStatement deleteStatement = dbConnection.prepareStatement(deletePedidoQuery)) {
                        deleteStatement.setInt(1, numPedido);
                        int rowsAffected = deleteStatement.executeUpdate();
                        if (rowsAffected > 0) {
                            System.out.println("Pedido eliminado con éxito.");
                        } else {
                            System.err.println("No se pudo eliminar el pedido, el número de pedido no fue encontrado.");
                        }
                    }
                } else {
                    System.out.println("No se puede eliminar el pedido: El pedido ya fue enviado.");
                }
            } else {
                System.out.println("No se encontró ningún pedido con ese número.");
            }
        } catch (SQLException e) {
            System.err.println("Error al procesar la eliminación del pedido: " + e.getMessage());
        }
    }



   /* public ArrayList<String> pendientes() {
        ArrayList<String> arrPedido = new ArrayList<>();
        for (Pedido p : listaPedidos.lista) {
            if (p.pedidoEnviado() == false) {
                arrPedido.add(p.toString());
            }
        }
        return arrPedido;
    }

    public ArrayList<String> filtroPendiente(String email) {
        ArrayList<String> filtro = new ArrayList<>();
        for (Pedido p : listaPedidos.lista) {
            if (p.getCliente().getEmail().equals(email) && p.pedidoEnviado() == false) {
                filtro.add(p.toString());
            }
        }
        return filtro;
    }

    public ArrayList<String> enviados() {
        ArrayList<String> arrPedido = new ArrayList<>();
        for (Pedido p : listaPedidos.lista) {
            if (p.pedidoEnviado() == true) {
                arrPedido.add(p.toString());
            }
        }
        return arrPedido;
    }

    public ArrayList<String> filtroEnviado(String email) {
        ArrayList<String> filtro = new ArrayList<>();
        for (Pedido p : listaPedidos.lista) {
            if (p.getCliente().getEmail().equals(email) && p.pedidoEnviado() == true) {
                filtro.add(p.toString());
            }
        }
        return filtro;
    }*/


    public ArrayList<String> filtroPendiente() {
        ArrayList<String> arrPendientes = new ArrayList<>();
        String query = "SELECT pedido.numPedido, pedido.cantidad, pedido.fecha, cliente.email, articulo.descripcion " +
                "FROM pedido " +
                "JOIN cliente ON pedido.idCliente = cliente.idCliente " +
                "JOIN articulo ON pedido.idArticulo = articulo.idArticulo";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            while (resultSet.next()) {
                LocalDateTime fechaPedido = resultSet.getTimestamp("fecha").toLocalDateTime();
                LocalDateTime ahora = LocalDateTime.now();

                if (Duration.between(fechaPedido, ahora).toHours() < 24) {
                    int numPedido = resultSet.getInt("numPedido");
                    int cantidad = resultSet.getInt("cantidad");
                    String email = resultSet.getString("email");
                    String descripcion = resultSet.getString("descripcion");

                    arrPendientes.add("Pedido Pendiente{" +
                            "NumPedido: " + numPedido +
                            ", Cantidad: " + cantidad +
                            ", Fecha: " + fechaPedido +
                            ", Email: " + email +
                            ", Artículo: " + descripcion +
                            "}");
                }
            }

        } catch (SQLException e) {
            System.err.println("Error al obtener pedidos pendientes: " + e.getMessage());
        }

        return arrPendientes;
    }

    public ArrayList<String> filtroEnviado() {
        ArrayList<String> arrEnviados = new ArrayList<>();
        String query = "SELECT pedido.numPedido, pedido.cantidad, pedido.fecha, cliente.email, articulo.descripcion " +
                "FROM pedido " +
                "JOIN cliente ON pedido.idCliente = cliente.idCliente " +
                "JOIN articulo ON pedido.idArticulo = articulo.idArticulo";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            while (resultSet.next()) {
                LocalDateTime fechaPedido = resultSet.getTimestamp("fecha").toLocalDateTime();
                LocalDateTime ahora = LocalDateTime.now();

                if (Duration.between(fechaPedido, ahora).toHours() >= 24) {
                    int numPedido = resultSet.getInt("numPedido");
                    int cantidad = resultSet.getInt("cantidad");
                    String email = resultSet.getString("email");
                    String descripcion = resultSet.getString("descripcion");

                    arrEnviados.add("Pedido Enviado{" +
                            "NumPedido: " + numPedido +
                            ", Cantidad: " + cantidad +
                            ", Fecha: " + fechaPedido +
                            ", Email: " + email +
                            ", Artículo: " + descripcion +
                            "}");
                }
            }

        } catch (SQLException e) {
            System.err.println("Error al obtener pedidos enviados: " + e.getMessage());
        }

        return arrEnviados;
    }

    public ArrayList<String> filtroPendiente(String email) {
        ArrayList<String> arrPendientes = new ArrayList<>();
        String query = "SELECT pedido.numPedido, pedido.cantidad, pedido.fecha, cliente.email, articulo.descripcion " +
                "FROM pedido " +
                "JOIN cliente ON pedido.idCliente = cliente.idCliente " +
                "JOIN articulo ON pedido.idArticulo = articulo.idArticulo " +
                "WHERE cliente.email = ?";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(query)) {
            preparedStatement.setString(1, email);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                LocalDateTime fechaPedido = resultSet.getTimestamp("fecha").toLocalDateTime();
                if (Duration.between(fechaPedido, LocalDateTime.now()).toHours() < 24) {
                    int numPedido = resultSet.getInt("numPedido");
                    int cantidad = resultSet.getInt("cantidad");
                    String descripcion = resultSet.getString("descripcion");

                    arrPendientes.add("Pedido Pendiente{" +
                            "NumPedido: " + numPedido +
                            ", Cantidad: " + cantidad +
                            ", Fecha: " + fechaPedido +
                            ", Email: " + email +
                            ", Artículo: " + descripcion +
                            "}");
                }
            }

        } catch (SQLException e) {
            System.err.println("Error al filtrar pedidos pendientes por cliente: " + e.getMessage());
        }

        return arrPendientes;
    }

    public ArrayList<String> filtroEnviado(String email) {
        ArrayList<String> arrEnviados = new ArrayList<>();
        String query = "SELECT pedido.numPedido, pedido.cantidad, pedido.fecha, cliente.email, articulo.descripcion " +
                "FROM pedido " +
                "JOIN cliente ON pedido.idCliente = cliente.idCliente " +
                "JOIN articulo ON pedido.idArticulo = articulo.idArticulo " +
                "WHERE cliente.email = ?";

        try (PreparedStatement preparedStatement = dbConnection.prepareStatement(query)) {
            preparedStatement.setString(1, email);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                LocalDateTime fechaPedido = resultSet.getTimestamp("fecha").toLocalDateTime();
                if (Duration.between(fechaPedido, LocalDateTime.now()).toHours() >= 24) {
                    int numPedido = resultSet.getInt("numPedido");
                    int cantidad = resultSet.getInt("cantidad");
                    String descripcion = resultSet.getString("descripcion");

                    arrEnviados.add("Pedido Enviado{" +
                            "NumPedido: " + numPedido +
                            ", Cantidad: " + cantidad +
                            ", Fecha: " + fechaPedido +
                            ", Email: " + email +
                            ", Artículo: " + descripcion +
                            "}");
                }
            }

        } catch (SQLException e) {
            System.err.println("Error al filtrar pedidos enviados por cliente: " + e.getMessage());
        }

        return arrEnviados;
    }





